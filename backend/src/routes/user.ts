import { Hono } from "hono";
import { sign } from "hono/jwt";
import { withAccelerate } from '@prisma/extension-accelerate'
import { PrismaClient } from '@prisma/client/edge'
import { signinInput,signupInput } from "@dikshajain/medium-project-zod";
export const userRouter = new Hono<{
	Bindings: {
		DATABASE_URL: string,
    JWT_SECRET :string
	}
}>();

userRouter.post('/signup',async(c) => {
    const prisma = new PrismaClient({
      datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())
    const body = await c.req.json();

  try{
  //we give here only email and password beasue name can be null and id is already autogenerated
    const users = await prisma.user.create({
      data:{
        email: body.email,
        password :body.password,
      },
    })

   const status= signupInput.safeParse(body);
   if(status.success){
    const token = await sign({id:users.id},c.env.JWT_SECRET);

  return c.json({
    jwt:token,
    id:users.id
  })

   }
   else{
    return c.json({
      error:"give proper credentials"
    })
   }

  }catch(e){
    return c.json({
      error:e
    })
  }
  })
  
  userRouter.post('/signin',async(c)=>{
  console.log("1")
    const prisma = new PrismaClient({
      datasourceUrl: c.env.DATABASE_URL,
    }).$extends(withAccelerate())
  
    const body =await c.req.json();
try{
  const user = await prisma.user.findUnique({
    where:{
      email: body.email,
      password:body.password
    }
  })
  const status= signinInput.safeParse(body);
  if(status.success){ 
    if(!user){
      c.status(403);
      return c.json({
        error:"user not found"
      })
    }
  
    const token = await sign({id:user.id}, c.env.JWT_SECRET);
    return c.json({
      msg:"user found",
      jwt : token,
      id:user.id
    })
  }else{
    return c.json({
      err:"give proper input"
    })
  }
}catch(e){
  return c.json({
    error:e
  })
}

  })